generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  resetToken     String?
  resetTokenExpiry  DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoriteIds    String[]      @db.ObjectId
  listings       Listing[]
  reservations   Reservation[]
  posts          Post[]
  accounts       Account[]
  bio            String
  imageSrc       String?      
  location       String?
  galleryImages  String[]


  isSubscribed    Boolean @default(false)
  subscriptionStartDate DateTime?
  subscriptionEndDate DateTime?
  subscriptionTier String? // Add this field

  // --- Stripe subscription fields ---
  stripeCustomerId             String?
  stripeSubscriptionId         String?
  subscriptionPriceId          String?
  subscriptionStatus           String?   // trialing | active | past_due | canceled | unpaid | etc.
  subscriptionBillingInterval  String?   // monthly | yearly
  currentPeriodEnd             DateTime?


  following    String[]      @db.ObjectId
  followers    String[]      @db.ObjectId
  comments Comment[]
  notifications Notification[]
  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
  messages       Message[]       // Add this line
  shops           Shop[]

  employees       Employee[]    // Link to employee records
  managedListings String[]      @db.ObjectId  // Listings they can manage as owner/manager
}




model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime      @default(now())
  category      String
  location      String?       
  userId        String        @db.ObjectId
  services      Service[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations  Reservation[]
  phoneNumber   String?
  website       String?
  address       String?
  zipCode       String?
  followers    String[] @default([]) // <â€” userIds of followers
  galleryImages  String[]
  employees Employee[]
  storeHours     StoreHours[]
  shops         Shop[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  employeeId   String  @db.ObjectId  // Add this field
  date       DateTime
  time       String
  note       String?
  totalPrice Int
  status     String   @default("pending") // Add this line - can be "pending", "accepted", "declined"
  createdAt  DateTime @default(now())
  serviceId   String   @db.ObjectId 
  serviceName String
  paymentIntentId String?
  paymentStatus   String?  @default("pending") // "pending", "completed", "failed", "refunded"             
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  service     Service @relation(fields: [serviceId], references: [id])  // Add this
  employee  Employee  @relation(fields: [employeeId], references: [id])  // Add this relation

}

model Service {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  serviceName String
  price       Int
  category    String
  imageSrc     String?   
  listingId   String  @db.ObjectId
  listing     Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reservations Reservation[] // Add this line for the opposite relation
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  imageSrc  String?
  location  String?
  tag       String?
  postType String? // Add this line
  photo     String?
  category  String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  mediaUrl    String?
  mediaType   String?  // 'image' | 'video' | 'gif'
  likes     String[] @db.ObjectId // Add this line
  bookmarks String[] @db.ObjectId  // Add this line
  hiddenBy  String[] @db.ObjectId  // Add this line
  comments Comment[]

  user User @relation(fields: [userId], references: [id])

}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   // e.g., "follow", "favorite_post", "favorite_listing"
  content   String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())  // Add default value
  users         User[]    @relation(fields: [userIds], references: [id])
  userIds       String[]  @db.ObjectId
  messages      Message[]
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  createdAt      DateTime     @default(now())
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId
  isRead         Boolean      @default(false)  // Add this line
}

model StoreHours {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId String   @db.ObjectId
  dayOfWeek String
  openTime  String
  closeTime String
  isClosed  Boolean  @default(false)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Employee {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  fullName     String
  jobTitle     String?
  listingId    String        @db.ObjectId
  userId       String        @db.ObjectId  // Required - no ? 
  serviceIds   String[]      @db.ObjectId
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  
  listing      Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade instead of SetNull
  reservations Reservation[]
  
  @@unique([userId, listingId])
}


model Shop {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  category       String?    // Add this for the category
  logo           String
  coverImage     String?
  location       String?
  address        String?    // Add this for address
  zipCode        String?    // Add this for zipCode
  isOnlineOnly   Boolean    @default(false)  // Add this for isOnlineOnly
  userId         String     @db.ObjectId
  storeUrl       String?    
  galleryImages  String[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  isVerified     Boolean    @default(false)
  
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  products       Product[]
  followers      String[]   @db.ObjectId
  
  listing        Listing?   @relation(fields: [listingId], references: [id], onDelete: SetNull)
  listingId      String?    @db.ObjectId
  
  shopEnabled    Boolean    @default(true)
  featuredProducts String[]  @db.ObjectId
}

model Product {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  price          Float
  compareAtPrice Float?     // Original price for showing discounts
  mainImage      String
  galleryImages  String[]
  shopId         String     @db.ObjectId
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  sku            String?
  barcode        String?    // UPC, EAN, etc.
  
  // Product details
  categoryId     String     @db.ObjectId
  category       ProductCategory @relation(fields: [categoryId], references: [id])
  tags           String[]
  isPublished    Boolean    @default(true)
  isFeatured     Boolean    @default(false)
  
  // Inventory
  inventory      Int        @default(0)
  lowStockThreshold Int     @default(5)
  
  // Shipping info
  weight         Float?
  
  // Relationships
  shop           Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)
  favoritedBy    String[]   @db.ObjectId // User IDs who favorited this product
  reviews        Json?      // Store reviews as JSON [{userId, rating, comment, date}]
  
  // Product options (like size, color) stored as JSON
  options        Json?      // [{name: "Size", values: ["S", "M", "L"]}]
  variants       Json?      // [{sku, price, inventory, optionValues: {Size: "M", Color: "Blue"}}]
}

model ProductCategory {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  image          String?
  parentId       String?    @db.ObjectId
  parent         ProductCategory? @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories  ProductCategory[] @relation("SubCategories")
  products       Product[]
}