generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoriteIds    String[]      @db.ObjectId
  listings       Listing[]
  reservations   Reservation[]
  posts          Post[]
  profile        Profile? // Notice there's no `@relation` directive here
  profileId      String?       @db.ObjectId
  // This line represents the relation to the Post model
}

model Listing {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime      @default(now())
  category      String
  locationValue String
  userId        String        @db.ObjectId
  services      Service[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations  Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Service {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  serviceName String
  price       Int
  category    String
  listingId   String  @db.ObjectId
  listing     Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  imageSrc  String?
  location  String?
  tag       String?
  photo     String?
  category  String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  // Include other fields and relations, but ensure 'userId' is not duplicated
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bio       String?
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageSrc  String?  // New field for storing additional image URL, if needed
  galleryImages GalleryImage[]
}

model GalleryImage {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}