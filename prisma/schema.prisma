generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoriteIds    String[]      @db.ObjectId
  listings       Listing[]
  reservations   Reservation[]
  posts          Post[]
  accounts       Account[]
  bio            String
  imageSrc       String?      
  location       String?
  galleryImages  String[]
  following    String[]      @db.ObjectId
  followers    String[]      @db.ObjectId
  comments Comment[]
  notifications Notification[]
  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
  messages       Message[]       // Add this line
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime      @default(now())
  category      String
  location      String?       
  userId        String        @db.ObjectId
  services      Service[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations  Reservation[]
  phoneNumber   String?
  website       String?
  address       String?
  zipCode       String?
  galleryImages  String[]
  employees Employee[]
  storeHours     StoreHours[]  // Add this line
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  employeeId   String  @db.ObjectId  // Add this field
  date       DateTime
  time       String
  note       String?
  totalPrice Int
  status     String   @default("pending") // Add this line - can be "pending", "accepted", "declined"
  createdAt  DateTime @default(now())
  serviceId   String   @db.ObjectId 
  serviceName String             
  

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  service     Service @relation(fields: [serviceId], references: [id])  // Add this
  employee  Employee  @relation(fields: [employeeId], references: [id])  // Add this relation

}

model Service {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  serviceName String
  price       Int
  category    String
  listingId   String  @db.ObjectId
  listing     Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reservations Reservation[] // Add this line for the opposite relation
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  imageSrc  String?
  location  String?
  tag       String?
  photo     String?
  category  String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  likes     String[] @db.ObjectId // Add this line
  bookmarks String[] @db.ObjectId  // Add this line
  hiddenBy  String[] @db.ObjectId  // Add this line
  comments Comment[]

  user User @relation(fields: [userId], references: [id])

}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   // e.g., "follow", "favorite_post", "favorite_listing"
  content   String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())  // Add default value
  users         User[]    @relation(fields: [userIds], references: [id])
  userIds       String[]  @db.ObjectId
  messages      Message[]
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  createdAt      DateTime     @default(now())
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId
  isRead         Boolean      @default(false)  // Add this line
}

model StoreHours {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId String   @db.ObjectId
  dayOfWeek String
  openTime  String
  closeTime String
  isClosed  Boolean  @default(false)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Employee {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  fullName     String
  listingId    String        @db.ObjectId
  listing      Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reservations Reservation[] // Add this line
}
